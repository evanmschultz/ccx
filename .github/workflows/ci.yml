name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install tools
      run: |
        go install mvdan.cc/gofumpt@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Verify dependencies
      run: |
        go mod download
        go mod verify

    - name: Check formatting
      run: |
        if [ -n "$(gofumpt -l .)" ]; then
          echo "Please run 'just fmt' to format code"
          gofumpt -l .
          exit 1
        fi

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.2.2

    - name: Run tests with race detector
      run: go test -race -coverprofile=coverage.out ./...

    - name: Check coverage
      run: |
        total=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $total%"
        if (( $(echo "$total < 90" | bc -l) )); then
          echo "Coverage $total% is below threshold 90%"
          exit 1
        fi

    - name: Build
      run: go build ./...

    - name: Security audit
      run: |
        govulncheck ./...
        golangci-lint run --enable-only=gosec

  test-matrix:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.24']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Run tests
      run: go test -v ./...

    - name: Run integration tests
      run: go test -tags=integration -v ./...
      if: matrix.os != 'windows-latest'  # Skip on Windows for now

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test-matrix]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}